/**
 * Lenis Smooth Scroll - Local Version
 * Simplified smooth scrolling implementation
 */
(function() {
  'use strict';
  
  class Lenis {
    constructor(options = {}) {
      this.options = {
        duration: 1.2,
        easing: options.easing || ((t) => Math.min(1, 1.001 - Math.pow(2, -10 * t))),
        direction: options.direction || 'vertical',
        gestureDirection: options.gestureDirection || 'vertical',
        smooth: options.smooth !== false,
        mouseMultiplier: options.mouseMultiplier || 1,
        smoothTouch: options.smoothTouch || false,
        touchMultiplier: options.touchMultiplier || 2,
        infinite: options.infinite || false,
        ...options
      };
      
      this.animationID = 0;
      this.isScrolling = false;
      this.targetScroll = 0;
      this.actualScroll = 0;
      this.velocity = 0;
      
      this.onScroll = options.onScroll || (() => {});
      
      if (this.options.smooth) {
        this.bindEvents();
        this.raf();
      }
    }
    
    bindEvents() {
      this.onWheel = this.onWheel.bind(this);
      this.onTouchStart = this.onTouchStart.bind(this);
      this.onTouchMove = this.onTouchMove.bind(this);
      this.onTouchEnd = this.onTouchEnd.bind(this);
      
      window.addEventListener('wheel', this.onWheel, { passive: false });
      window.addEventListener('touchstart', this.onTouchStart, { passive: false });
      window.addEventListener('touchmove', this.onTouchMove, { passive: false });
      window.addEventListener('touchend', this.onTouchEnd, { passive: false });
    }
    
    onWheel(e) {
      if (!this.options.smooth) return;
      
      e.preventDefault();
      
      const delta = e.deltaY || e.detail || e.wheelDelta;
      this.targetScroll += delta * this.options.mouseMultiplier;
      this.targetScroll = Math.max(0, Math.min(this.targetScroll, this.getMaxScroll()));
    }
    
    onTouchStart(e) {
      this.touchStart = {
        x: e.touches[0].clientX,
        y: e.touches[0].clientY,
        time: Date.now()
      };
    }
    
    onTouchMove(e) {
      if (!this.options.smoothTouch) return;
      
      e.preventDefault();
      
      const touch = e.touches[0];
      const deltaY = this.touchStart.y - touch.y;
      
      this.targetScroll += deltaY * this.options.touchMultiplier;
      this.targetScroll = Math.max(0, Math.min(this.targetScroll, this.getMaxScroll()));
      
      this.touchStart.y = touch.y;
    }
    
    onTouchEnd() {
      // Touch end logic
    }
    
    getMaxScroll() {
      return Math.max(0, document.documentElement.scrollHeight - window.innerHeight);
    }
    
    raf() {
      const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
      
      if (Math.abs(this.targetScroll - currentScroll) < 0.1) {
        this.actualScroll = this.targetScroll;
        this.velocity = 0;
        this.isScrolling = false;
      } else {
        this.actualScroll += (this.targetScroll - currentScroll) * 0.1;
        this.velocity = this.targetScroll - currentScroll;
        this.isScrolling = true;
        window.scrollTo(0, this.actualScroll);
      }
      
      this.onScroll({
        scroll: this.actualScroll,
        velocity: this.velocity,
        direction: this.velocity > 0 ? 'down' : 'up',
        isScrolling: this.isScrolling
      });
      
      this.animationID = requestAnimationFrame(() => this.raf());
    }
    
    scrollTo(target, options = {}) {
      let targetPosition;
      
      if (typeof target === 'number') {
        targetPosition = target;
      } else if (typeof target === 'string') {
        const element = document.querySelector(target);
        if (element) {
          targetPosition = element.offsetTop;
        }
      } else if (target instanceof Element) {
        targetPosition = target.offsetTop;
      }
      
      if (targetPosition !== undefined) {
        this.targetScroll = Math.max(0, Math.min(targetPosition, this.getMaxScroll()));
      }
    }
    
    destroy() {
      cancelAnimationFrame(this.animationID);
      window.removeEventListener('wheel', this.onWheel);
      window.removeEventListener('touchstart', this.onTouchStart);
      window.removeEventListener('touchmove', this.onTouchMove);
      window.removeEventListener('touchend', this.onTouchEnd);
    }
  }
  
  // Export for global use
  window.Lenis = Lenis;
})();
